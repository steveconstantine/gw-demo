{"version":3,"file":"main.d5f5411e2273d62f18ef.hot-update.js","sources":["webpack:///./src/checkout.js"],"sourcesContent":["import gql from 'graphql-tag';\nimport _ from 'underscore';\n\nvar localStorage = require('web-storage')().localStorage;\n\nconst CheckoutFragment = gql`\n  fragment CheckoutFragment on Checkout {\n    id\n    webUrl\n    totalTax\n    subtotalPrice\n    totalPrice\n    lineItems (first: 250) {\n      edges {\n        node {\n          id\n          title\n          variant {\n            id\n            title\n            image {\n              src\n            }\n            price\n          }\n          quantity\n        }\n      }\n    }\n  }\n`;\n\nexport const createCheckout = gql`\n  mutation checkoutCreate ($input: CheckoutCreateInput!){\n    checkoutCreate(input: $input) {\n      userErrors {\n        message\n        field\n      }\n      checkout {\n        ...CheckoutFragment\n      }\n    }\n  }\n  ${CheckoutFragment}\n`;\n\nexport const checkoutLineItemsAdd = gql`\n  mutation checkoutLineItemsAdd ($checkoutId: ID!, $lineItems: [CheckoutLineItemInput!]!) {\n    checkoutLineItemsAdd(checkoutId: $checkoutId, lineItems: $lineItems) {\n      userErrors {\n        message\n        field\n      }\n      checkout {\n        ...CheckoutFragment\n      }\n    }\n  }\n  ${CheckoutFragment}\n`;\n\nexport const checkoutLineItemsUpdate = gql`\n  mutation checkoutLineItemsUpdate ($checkoutId: ID!, $lineItems: [CheckoutLineItemUpdateInput!]!) {\n    checkoutLineItemsUpdate(checkoutId: $checkoutId, lineItems: $lineItems) {\n      userErrors {\n        message\n        field\n      }\n      checkout {\n        ...CheckoutFragment\n      }\n    }\n  }\n  ${CheckoutFragment}\n`;\n\nexport const checkoutLineItemsRemove = gql`\n  mutation checkoutLineItemsRemove ($checkoutId: ID!, $lineItemIds: [ID!]!) {\n    checkoutLineItemsRemove(checkoutId: $checkoutId, lineItemIds: $lineItemIds) {\n      userErrors {\n        message\n        field\n      }\n      checkout {\n        ...CheckoutFragment\n      }\n    }\n  }\n  ${CheckoutFragment}\n`;\n\nexport const checkoutCustomerAssociate = gql`\n  mutation checkoutCustomerAssociate($checkoutId: ID!, $customerAccessToken: String!) {\n    checkoutCustomerAssociate(checkoutId: $checkoutId, customerAccessToken: $customerAccessToken) {\n      userErrors {\n        field\n        message\n      }\n      checkout {\n        ...CheckoutFragment\n      }\n    }\n  }\n  ${CheckoutFragment}\n`;\n\nexport function addVariantToCart(variantId, quantity){\n  this.props.checkoutLineItemsAdd(\n    { variables: { checkoutId: this.state.checkout.id, lineItems:  [{variantId, quantity: parseInt(quantity, 10)}] }\n    }).then((res) => {\n    if (_.isNull(variantId) || _.isUndefined(variantId)) {\n          // toast message\n    } else {\n    localStorage.set('checkout', JSON.stringify(res.data.checkoutLineItemsAdd.checkout));\n    this.setState({\n      checkout: res.data.checkoutLineItemsAdd.checkout\n    });\n    }\n  });\n\n  this.handleCartOpen();\n}\n\nexport function addDonationToCart(variantId, lineItemId, quantity){\n  this.props.checkoutLineItemsAdd(\n    { variables: { checkoutId: this.state.checkout.id, lineItems:  [{variantId, quantity: parseInt(quantity * 100, 10)}] }\n    }).then((res) => {\n    if(lineItemId != null) {\n    this.removeDonationInCart(lineItemId);\n    localStorage.set('checkout', JSON.stringify(res.data.checkoutLineItemsAdd.checkout));\n    this.setState({\n      checkout: res.data.checkoutLineItemsAdd.checkout\n    });\n  }\n    // console.log(this.state.checkout);\n  });\n}\n\nexport function removeDonationInCart(lineItemId){\n  console.log(lineItemId);\n  this.props.checkoutLineItemsUpdate(\n    { variables: { checkoutId: this.state.checkout.id, lineItems: [{id: lineItemId, quantity: 0}] }\n    }).then((res) => {\n    localStorage.set('checkout', JSON.stringify(res.data.checkoutLineItemsUpdate.checkout));\n    this.setState({\n      checkout: res.data.checkoutLineItemsUpdate.checkout\n    });\n  });\n}\n\nexport function updateLineItemInCart(lineItemId, quantity){\n  this.props.checkoutLineItemsUpdate(\n    { variables: { checkoutId: this.state.checkout.id, lineItems: [{id: lineItemId, quantity: parseInt(quantity, 10)}] }\n    }).then((res) => {\n    localStorage.set('checkout', JSON.stringify(res.data.checkoutLineItemsUpdate.checkout));\n    this.setState({\n      checkout: res.data.checkoutLineItemsUpdate.checkout\n    });\n  });\n}\n\nexport function removeLineItemInCart(lineItemId){\n  this.props.checkoutLineItemsRemove(\n    { variables: { checkoutId: this.state.checkout.id, lineItemIds: [lineItemId] }\n    }).then((res) => {\n    localStorage.set('checkout', JSON.stringify(res.data.checkoutLineItemsRemove.checkout));\n    this.setState({\n      checkout: res.data.checkoutLineItemsRemove.checkout\n    });\n  });\n}\n\nexport function associateCustomerCheckout(customerAccessToken){\n  this.props.checkoutCustomerAssociate(\n    { variables: { checkoutId: this.state.checkout.id, customerAccessToken: customerAccessToken }\n    }).then((res) => {\n    localStorage.set('checkout', JSON.stringify(res.data.checkoutCustomerAssociate.checkout));\n    this.setState({\n      checkout: res.data.checkoutCustomerAssociate.checkout,\n      isCustomerAuthOpen: false,\n      loggedIn: true,\n    });\n  });\n}\n"],"mappings":"AAGA","sourceRoot":""}