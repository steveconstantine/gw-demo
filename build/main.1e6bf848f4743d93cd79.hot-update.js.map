{"version":3,"file":"main.1e6bf848f4743d93cd79.hot-update.js","sources":["webpack:///./src/components/Product.js"],"sourcesContent":["/* eslint-disable import/first */\n\nimport React, {Component} from 'react';\n//import ProductSocial from './Product/ProductSocial';\n//import ProductOptions from './Product/ProductOptions';\n//import ProductDescriptionImage from './Product/ProductDescriptionImage';\nimport VariantSelector from './Product/VariantSelector';\nimport SingleVariantSelector from './Product/SingleVariantSelector';\nimport ProductSocial from './Product/ProductSocial';\nimport ProductOptions from './Product/ProductOptions';\nimport ProductDescriptionImage from './Product/ProductDescriptionImage';\n\n// import Info from './Info/Info';\nimport { Box, Column, TextField, Toast, IconButton, Heading, Button, Image } from 'gestalt';\nimport { ModalLink } from 'sc-react-router-modal';\nimport Swipeable from 'react-swipeable';\nimport Rodal from 'sc-rodal';\nimport isMobile from 'ismobilejs';\nimport ReactModal from 'react-modal';\nimport _ from 'underscore';\nimport BackgroundImage from 'react-background-image-loader';\n\nReactModal.setAppElement('#root');\n\n\nclass ModalLinkProduct extends React.Component {\n  state = { show: false }\n\n  render() {\n      let product = this.props.product;\n    let variantImage = this.state.selectedVariantImage || this.props.product.images.edges[0].node.src\n      const styles = {\n        homeBackground: {\n          backgroundImage: `url(${variantImage})`,\n          backgroundPosition: 'center',\n          backgroundRepeat: 'no-repeat',\n          backgroundSize: 'cover',\n          height: 'calc(200px + 25vh)',\n          minWidth: '185px',\n          minHeight: '200px',\n          maxHeight: '400px'\n        }\n      };\n\n\n    return (\n      <div>\n      {this.props.isSliding == false ?\n          <ModalLink\n          path={`/art/${product.vendor.replace(\" \",\"-\").toLowerCase().toString()}-${product.title.replace(\" \",\"-\").toLowerCase().toString()}`}\n          parentPath='/'\n          component={Product}\n          props={{\n          addVariantToCart: this.props.addVariantToCart,\n          client: this.props.client,\n          checkout: this.props.checkout,\n          key: product.id.toString(),\n          product: product,\n          artSize: (Math.random() + 1),\n          productIDs: this.props.productIDs,\n          productIndex: this.props.productIndex,\n          handleImageLoaded: this.props.handleImageLoaded\n        }}>\n              <BackgroundImage style={styles.homeBackground} src={variantImage} placeholder={variantImage} key={this.props.product.name}>\n                <div className=\"Product_title__overlay\" style={{'borderRadius': '0 5px 5px 0', 'transform':'translateY(200px)', 'marginRight': '5%', 'padding': '1px 0px 1px 0px', 'background': 'rgba(255,255,255,0.44)'}}>\n                <h5 className=\"Product__title\" style={{'paddingLeft':'16px', 'marginBottom': '0', 'zIndex':'4', 'color' : 'rgba(0,0,0,0.8)'}}>{this.props.product.title}</h5>\n                <h5 className=\"Product__vendor\" style={{'paddingLeft':'16px', 'marginTop': '2px', 'zIndex': '4','color' : 'rgba(0,0,0,0.8)'}}>{this.props.product.vendor}</h5>\n                </div>\n                <Box alignItems=\"center\" display=\"flex\" alignSelf=\"center\" justifyContent=\"center\" >\n                  <Box padding={1}>\n                  </Box>\n                </Box>\n              </BackgroundImage>\n          </ModalLink> : <BackgroundImage style={styles.homeBackground} src={variantImage} placeholder={variantImage} key={this.props.product.name}>\n                          <div className=\"Product_title__overlay\" style={{'borderRadius': '0 5px 5px 0', 'transform':'translateY(200px)', 'marginRight': '5%', 'padding': '1px 0px 1px 0px', 'background': 'rgba(255,255,255,0.44)'}}>\n                          <h5 className=\"Product__title\" style={{'paddingLeft':'16px', 'marginBottom': '0', 'zIndex':'4', 'color' : 'rgba(0,0,0,0.8)'}}>{this.props.product.title}</h5>\n                          <h5 className=\"Product__vendor\" style={{'paddingLeft':'16px', 'marginTop': '2px', 'zIndex': '4','color' : 'rgba(0,0,0,0.8)'}}>{this.props.product.vendor}</h5>\n                          </div>\n                          <Box alignItems=\"center\" display=\"flex\" alignSelf=\"center\" justifyContent=\"center\" >\n                            <Box padding={1}>\n                            </Box>\n                          </Box>\n                        </BackgroundImage> }\n      </div>\n    );\n  }\n}\n\nclass Product extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { order: null};\n\n   let defaultOptionValues = {};\n    this.props.product.options.forEach((selector) => {\n      defaultOptionValues[selector.name] = selector.values[0].value;\n    });\n    this.state = { cartDisabled: false, scrollElement: 0, isOpen: false, selectedVariantQuantity: 1, showConfirmationToast: 0, selectedOptions: defaultOptionValues, modalOpen: false, modalRunning: true};\n    this.handleModalClose = this.handleModalClose.bind(this);\n    this.handleModalCloseHash = this.handleModalCloseHash.bind(this);\n    this.handleOptionChange = this.handleOptionChange.bind(this);\n    this.handleQuantityChange = this.handleQuantityChange.bind(this);\n    this.findImage = this.findImage.bind(this);\n    this.goPreviousProduct = this.goPreviousProduct.bind(this);\n    this.goNextProduct = this.goNextProduct.bind(this);\n    this.scrollDiv = this.scrollDiv.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.componentWillMount = this.componentWillMount.bind(this);\n  }\n\n  componentWillMount() {\n    this.props.product.options.forEach((selector) => {\n      this.setState({\n        selectedOptions: { [selector.name]: selector.values[0] }\n      });\n    });\n  }\n\n  componentDidMount() {\n  //  let focusElement = document.getElementsByClassName('rodal-dialog')[0].firstChild;\n //   focusElement.focus();\n  }\n\n  findImage(images, variantId) {\n    const primary = images[0];\n\n    const image = images.filter(function (image) {\n      return image.variant_ids.includes(variantId);\n    })[0];\n\n    return (image || primary).src;\n  }\n\n  handleOptionChange(event, name) {\n    let selectedOptions = this.state.selectedOptions;\n    selectedOptions[name] = event;\n\n     if (event !== null && _.isUndefined(this.props.product.variants.edges.find((variant) => {\n      return variant.node.selectedOptions.every((selectedOption) => {\n        return selectedOptions[selectedOption.name] === selectedOption.value;\n      });\n    })) == false) {\n    const selectedVariant = this.props.product.variants.edges.find((variant) => {\n      return variant.node.selectedOptions.every((selectedOption) => {\n        return selectedOptions[selectedOption.name] === selectedOption.value;\n      });\n    }).node;\n      this.setState({cartDisabled: false});\n      this.setState({\n      selectedVariant: selectedVariant,\n      selectedVariantImage: selectedVariant.image.src\n    });\n      } else {\n        this.setState({cartDisabled: true});\n      }\n\n  }\n\n  handleQuantityChange(event) {\n    let value = event.value;\n    if (value < 1) {\n      value = 1;\n    }\n    this.setState({\n      selectedVariantQuantity: value\n      });\n  }\n\n\n  handleModalClose() {\n    this.props.history.push('/');\n    this.setState({modalOpen: false, modalRunning: false});\n  }\n\n  handleModalCloseHash() {\n    this.props.history.push('/cart');\n    this.setState({modalOpen: false, modalRunning: false});\n  }\n\n  goPreviousProduct() {\n    this.setState({modalRunning: true});\n    let currentIndex = this.props.productIndex;\n    if (currentIndex === 0) {\n      currentIndex = this.props.productIDs.length;\n    }\n    this.props.history.push('/art/' + this.props.productIDs[currentIndex - 1][1].replace(\" \",\"-\").toLowerCase().toString() + '-' + this.props.productIDs[currentIndex - 1][2].replace(\" \",\"-\").toLowerCase().toString());\n  }\n\n    goNextProduct() {\n    this.setState({modalRunning: true});\n    let currentIndex = this.props.productIndex;\n    if (currentIndex === this.props.productIDs.length - 1) {\n      currentIndex = -1;\n    }\n    this.props.history.push('/art/' + this.props.productIDs[currentIndex + 1][1].replace(\" \",\"-\").toLowerCase().toString() + '-' + this.props.productIDs[currentIndex + 1][2].replace(\" \",\"-\").toLowerCase().toString());\n  }\n\n  scrollDiv() {\n  //   console.log(document.activeElement);\n  //    document.getElementById('rodal-modal').firstChild.click();\n  }\n\n  render() {\n    let variantImage = this.state.selectedVariantImage || this.props.product.images.edges[0].node.src\n    let variant = this.state.selectedVariant || this.props.product.variants.edges[0].node\n    let variantQuantity = this.state.selectedVariantQuantity || 1\n    let variant_selectors = [];\n    let text_button_variant_selectors = [];\n    if (this.props.product.variants.edges[0].node.selectedOptions.length > 1) {\n    variant_selectors = this.props.product.options.map((option) => {\n      return (\n        <Box paddingX={2}>\n        <VariantSelector\n          handleOptionChange={this.handleOptionChange}\n          key={option.id.toString()}\n          option={option}\n          product={this.props.product}\n          variant={variant}\n          selectedVariant={this.selectedVariant}\n        />\n        </Box>\n      );\n    });\n    } else {\n          variant_selectors = this.props.product.options.map((option) => {\n      return (\n        <SingleVariantSelector\n          handleOptionChange={this.handleOptionChange}\n          key={option.id.toString()}\n          option={option}\n          product={this.props.product}\n          variant={variant}\n          selectedVariant={this.selectedVariant}\n        />\n      );\n    });\n    }\n\n   const styles = {\n  modalBackground: {\n    backgroundImage: `url(${variantImage})`,\n    height: '100vh',\n    minHeight: '100%',\n    width: '100vw',\n    marginBottom: '0 !important',\n    backgroundPosition: 'center',\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: 'cover',\n    marginTop: '0 !important',\n    marginLeft:'auto',\n    marginRight: 'auto',\n    padding: '0',\n    zIndex: '5 !important',\n    overflowY: 'scroll',\n    overflowX: 'hidden',\n  },\n    desktopBackground: {\n    backgroundImage: `url(${variantImage})`,\n    backgroundPosition: 'center',\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: 'cover',\n    padding: '0',\n    zIndex: '5 !important',\n    overflowY: 'scroll',\n    overflowX: 'hidden',\n    minHeight: '80vh',\n    maxWidth: '40vw',\n  },\n  homeBackground: {\n    backgroundImage: `url(${variantImage})`,\n    backgroundPosition: 'center',\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: 'cover',\n    height: '100vh',\n    minWidth: '100vw',\n  },\n  modalContent: {\n    height: '90vh',\n    width: '100%',\n    backgroundColor: 'rgba(255, 255, 255, 0.6)',\n  }\n};\n    let bioDescription = this.props.product.descriptionHtml.split(\"<h1><span>BIO</span></h1>\");\n         return (\n      <div id=\"top-level-modal\" style={{'height':'100vh', 'width': '100vw'}}>\n      <Box display=\"flex\" direction=\"row\" paddingY={2}>\n       <ReactModal\n  isOpen={this.state.modalRunning}\n  onRequestClose={() => this.handleModalClose()}\n  closeTimeoutMS={50}\n  style={{ overlay: {}, content: {          backgroundImage: `url(${variantImage})`,\n          height: '100vh',\n          minHeight: '100vh',\n          marginBottom: '0 !important',\n          backgroundPosition: 'bottom center',\n          backgroundRepeat: 'no-repeat',\n          backgroundSize: 'cover',\n          marginTop: '0 !important',\n          marginLeft:'auto',\n          marginRight: 'auto',\n          width: '100vw',\n          zIndex: '5 !important',} }}\n  contentLabel=\"Example Modal\"\n  portalClassName=\"ReactModalPortal\"\n  overlayClassName=\"ReactModal__Overlay\"\n  className=\"ReactModal__Content\"\n  bodyOpenClassName=\"ReactModal__Body--open\"\n  htmlOpenClassName=\"ReactModal__Html--open\"\n  ariaHideApp={true}\n  shouldFocusAfterRender={true}\n  shouldCloseOnOverlayClick={true}\n  shouldCloseOnEsc={true}\n  shouldReturnFocusAfterClose={true}\n  role={\"dialog\"}\n  aria={{\n    labelledby: \"heading\",\n    describedby: \"full_description\"\n  }}\n><div style={{'background': 'rgba(255,255,255,0.35)', 'padding': '25px' }}>\n  <div className=\"just-donate\" style={{'position': 'fixed', 'right': '2px', 'top': '2px', 'zIndex': '9999'}}>\n    <Box padding={2}>\n    <IconButton\n      accessibilityLabel=\"Cancel\"\n      bgColor=\"white\"\n      icon=\"cancel\"\n      iconColor=\"darkGray\"\n      onClick={() => {this.handleModalClose()}}\n    />\n    </Box>\n  </div>\n\n        <Swipeable\n                onSwipingRight={() => this.goPreviousProduct()}\n                onSwipingLeft={() => this.goNextProduct()} >\n              <Box display=\"flex\" direction=\"row\" paddingY={2}>\n                  <Column span={12}>\n                  <Box padding={2}>\n                  <ProductDescriptionImage variantImage={variantImage} bioDescription={bioDescription} product={this.props.product} variant={variant} />\n                    {this.props.product.images.edges.length ? <img onLoad={this.props.handleImageLoaded} src={variantImage} style={{'maxHeight': '450px', 'paddingTop': '50px'}} alt={`${this.props.product.title} product shot`}/> : null}\n                    <div className={'mobileOptions'}>\n                    <ProductOptions handleQuantityChange={this.handleQuantityChange} selectedVariantQuantity={this.state.selectedVariantQuantity} variant_selectors={variant_selectors} />\n                    <Button color=\"gray\" disabled={ this.state.cartDisabled == true || variant.availableForSale === false ? true : false } text={ variant.availableForSale === true ? \"Add to Cart\" : \"Out of Stock\" } onClick={() => {this.props.addVariantToCart(variant.id, variantQuantity); this.handleModalCloseHash();}} style={{'marginBottom':'12px', 'position': 'fixed', 'right': '5px', 'bottom': '0', 'left': '5px'}} />\n                    </div>\n                  </Box>\n                  <ProductSocial location={this.props.location} product={this.props.product} />\n                </Column>\n              </Box>\n            </Swipeable>\n            </div>\n            <div className={'desktopOptions'} style={{'width': '100vw', 'height': '126px', 'position': 'fixed', 'left': '0', 'bottom': '0', 'right': '0', 'display': 'block', 'background': 'rgba(0,0,0,0.45)', 'color': 'white'}}>\n              <ProductOptions handleQuantityChange={this.handleQuantityChange} selectedVariantQuantity={this.state.selectedVariantQuantity} variant_selectors={variant_selectors} />\n              <div style={{'position': 'fixed', 'bottom': '26px', 'right': '16px', 'width': '84px'}}>\n              <Button color=\"gray\" disabled={ this.state.cartDisabled == true || variant.availableForSale === false ? true : false } text={ variant.availableForSale === true ? \"Add to Cart\" : \"Out of Stock\" } onClick={() => {this.props.addVariantToCart(variant.id, variantQuantity); this.handleModalCloseHash();}} style={{'marginBottom':'12px', 'position': 'fixed !important', 'right': '5px', 'bottom': '0', 'left': '5px'}} />\n              </div>\n            </div>\n            </ReactModal>\n        </Box>\n      </div>\n    );\n  }\n}\n\nexport default ModalLinkProduct;\n\n/**\nf\ngestalt css editting\n\n<Box\n   fit\n   dangerouslySetInlineStyle={{\n     __style: {\n       bottom: 50,\n       left: '50%',\n       transform: 'translateX(-50%)',\n       zIndex: 10\n     },\n   }}\n   paddingX={1}\n   position='fixed'\n >\n</Box>\n\n**/\n"],"mappings":"AAsBA","sourceRoot":""}