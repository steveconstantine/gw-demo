{"version":3,"file":"main.30b7b5904482d19a76e4.hot-update.js","sources":["webpack:///./src/components/Cart.js"],"sourcesContent":["import React, {Component} from 'react';\nimport LineItem from './LineItem';\nimport { Button as CartButton, TextField, Box, Layer, IconButton } from 'gestalt';\nimport DonationRadioButtonGroup from './RadioButtonGroup/DonationRadioButtonGroup';\nimport _ from 'underscore';\nimport isMobile from 'ismobilejs';\nimport ReactModal from 'react-modal';\nimport VirtualList from 'react-tiny-virtual-list';\n\nconst options = [\n  {\n    value: '0',\n    label: 'None'\n  }, {\n    value: '10',\n    label: '$10'\n  }, {\n    value: '50',\n    label: '$50'\n  }, {\n    value: '200',\n    label: '$200'\n  }, {\n    value: '1000',\n    label: '$1000'\n  }, {\n    value: 'more',\n    label: 'More'\n  }\n]\n\nclass Cart extends Component {\n  constructor(props) {\n  super(props);\n    this.state = {order : null, orderExtra: null};\n    this.setDonation = this.setDonation.bind(this);\n    this.setDonationClick = this.setDonationClick.bind(this);\n  }\n\n  setDonation(event) {\n    let value = event.value;\n    if (value < 0) {\n      value = 0;\n    }\n    this.setState({orderExtra: value});\n    let line_items = [];\n    let line_item_array = [];\n    if (_.isNull(this.props.checkout) == false && _.isUndefined(this.props.checkout.lineItems) == false) {\n      line_item_array = this.props.checkout.lineItems.edges.map((line_item) => {\n          return line_item.node.variant.id.toString();\n        }, this);\n        console.log(line_item_array);\n      for (let i = 0; i < line_item_array.length; i++) {\n          if (line_item_array[i] == this.props.donationId) {\n              line_items.push(line_item_array[i]);\n          }\n      }\n      if (line_items.length > 0) {\n        this.props.setDonationValue(value.replace(/\\./g, \"\"), line_items[0]);\n      } else {\n        this.props.setDonationValue(value.replace(/\\./g, \"\"), line_items[0]);\n      }\n    } else {\n    // do nothing\n    }\n  }\n\n  setDonationClick(value) {\n    this.setState({order: value, orderExtra: null });\n    let line_items = [];\n    let line_item_array = [];\n    if (_.isNull(this.props.checkout) == false && _.isUndefined(this.props.checkout.lineItems) == false) {\n      line_item_array = this.props.checkout.lineItems.edges.map((line_item) => {\n          return line_item.node.variant.id.toString();\n        }, this);\n      for (let i = 0; i < line_item_array.length; i++) {\n          if (line_item_array[i] == this.props.donationId) {\n              line_items.push(line_item_array[i]);\n          }\n      }\n      if (value != 'more' && line_items.length > 0) {\n        this.props.setDonationValue(value.replace(/\\./g, \"\"), line_items[0]);\n      } else {\n        console.log(\"failed to set donation\");\n      }\n    } else {\n    // do nothing\n    }\n  }\n\n  render() {\n    if (_.isNull(this.props.checkout)) {\n      console.log(\"null checkout\");\n    }\n    let line_items = [];\n    if (_.isNull(this.props.checkout) == false && _.isUndefined(this.props.checkout.lineItems) == false) {\n    line_items = this.props.checkout.lineItems.edges.reduce((result, line_item) => {\n          result.push(<LineItem\n          removeLineItemInCart={this.props.removeLineItemInCart}\n          updateLineItemInCart={this.props.updateLineItemInCart}\n          key={line_item.node.id.toString()}\n          line_item={line_item.node}\n        />);\n    return result;\n  }, []);\n  }\n    let moreSelected = false;\n    let finalDonation;\n      if (this.state.order == 'more') {\n        moreSelected = true;\n        finalDonation = this.state.orderExtra;\n      } else {\n        finalDonation = this.state.order;\n      }\n\n      if (finalDonation == null && this.state.order == 'more' || this.state.orderExtra != null && this.state.order == 'more') {\n        finalDonation = parseFloat(this.state.orderExtra).toFixed(2);\n      } else if (this.state.order == null) {\n        finalDonation = parseFloat(0).toFixed(2);\n      } else if (this.state.order != 'more') {\n        finalDonation = parseFloat(this.state.order).toFixed(2);\n      }\n\n      if (finalDonation == null || finalDonation == 'NaN') {\n        finalDonation = parseFloat(0).toFixed(2);\n      }\n      let trueCheckout = _.isNull(this.props.checkout);\n      let finalCheckoutValue = parseFloat(finalDonation, 10).toFixed(2);\n      if (_.isNull(this.props.checkout) == false) {\n       finalCheckoutValue = parseFloat(this.props.checkout.totalPrice,10) + parseFloat(finalDonation, 10);\n     }\n\n     if (line_items.length < 1) {\n       line_items.push(<div className=\"addToCartButton\">\n                       <Box padding={2} justifyContent=\"center\" alignItems=\"center\" display=\"flex\" marginTop=\"100px\">\n                       <CartButton\n                          dangerouslySetInlineStyle={{\n                            __style: {\n                              fontSize: '36px !important',\n                              padding: '0 50px !important'\n                            },\n                          }}\n                          size=\"lg\" color=\"transparent\" text=\"Add Items To Cart\" onClick={this.props.handleCartClose}></CartButton>\n                       </Box>\n                 </div>);\n     }\n\n    return (\n      <div>\n      { this.props.isCartOpen && (\n        <ReactModal\n     isOpen={true}\n     onRequestClose={this.props.handleCartClose}\n     closeTimeoutMS={50}\n     style={{ overlay: {}, content: {          background: `rgba(255,255,255,0.4)`,\n           height: '100vh',\n           minHeight: '100vh',\n           marginBottom: '0 !important',\n           backgroundPosition: 'bottom center',\n           backgroundRepeat: 'no-repeat',\n           backgroundSize: 'cover',\n           marginTop: '0 !important',\n           marginLeft:'auto',\n           marginRight: 'auto',\n           width: '100vw',\n           zIndex: '5 !important',} }}\n     contentLabel=\"Example Modal\"\n     portalClassName=\"ReactModalPortal\"\n     overlayClassName=\"ReactModal__Overlay\"\n     className=\"ReactModal__Content\"\n     bodyOpenClassName=\"ReactModal__Body--open\"\n     htmlOpenClassName=\"ReactModal__Html--open\"\n     ariaHideApp={true}\n     shouldFocusAfterRender={true}\n     shouldCloseOnOverlayClick={true}\n     shouldCloseOnEsc={true}\n     shouldReturnFocusAfterClose={true}\n     role={\"dialog\"}\n     aria={{\n     labelledby: \"heading\",\n     describedby: \"full_description\"\n     }}\n     >\n        <div style={{ 'display': 'inline-grid', 'marginLeft': '0', 'minHeight': '100vh'}}>\n        <header className=\"Cart__header\" style={{'position': 'relative', 'width': '100vw', 'height': '100%'}}>\n          <div className=\"just-donate\" style={{'position': 'fixed', 'right': '12px', 'top': '2px', 'zIndex': '9999'}}>\n            <Box padding={2}>\n            <IconButton\n              accessibilityLabel=\"Cancel\"\n              bgColor=\"white\"\n              icon=\"cancel\"\n              iconColor=\"darkGray\"\n              onClick={this.props.handleCartClose}\n            />\n            </Box>\n          </div>\n        </header>\n        <VirtualList\nwidth='100%'\nheight={375}\nitemCount={line_items.length}\nitemSize={150}\nrenderItem={({index}) =>\n  <div key={index} style={ index % 2 == 0 ? {'background': 'rgba(255, 255, 255, 0.5)', 'padding': '20px'} : {'background': 'rgba(123, 123, 255, 0.123)', 'padding': '20px'}}>\n  {line_items[index]}\n  </div>\n}\n/>\n        <div className=\"Cart__donations\" style={{'position': 'sticky', 'width': '100vw',  }}>\n              <p className=\"donations donationsMobile\" style={{'position': 'relative', 'width': '100vw'}}>Donate Extra</p>\n              <DonationRadioButtonGroup items={options} value={moreSelected == 'true' ? 'moreSelected' : this.state.order}\n                                type=\"default\" onClick={this.setDonationClick}/>\n        </div>\n          { moreSelected == true  ?\n        <div className=\"Cart__donations__more\" style={{'position': 'sticky', 'width': '100vw',  }}>\n        <Box padding={3}>\n              <TextField\n          id=\"donate-more\"\n          onChange={this.setDonation}\n          placeholder=\"Donate Extra\"\n          value={this.state.orderExtra}\n          type={\"number\"}\n          />\n          </Box>\n        </div> : null }\n        <footer className=\"Cart__footer\" style={{'position': 'relative', 'width': '100vw',  }}>\n          <div className=\"Cart-info clearfix\">\n            <div className=\"Cart-info__total Cart-info__small\">Subtotal</div>\n            <div className=\"Cart-info__pricing\">\n              <span className=\"pricing\">$ {trueCheckout == false ? this.props.checkout.subtotalPrice : finalDonation}</span>\n            </div>\n          </div>\n          <div className=\"Cart-info clearfix\">\n            <div className=\"Cart-info__total Cart-info__small\">Extra Donation</div>\n            <div className=\"Cart-info__pricing\">\n              <span className=\"pricing\">$ {finalDonation}</span>\n            </div>\n          </div>\n          <div className=\"Cart-info clearfix\">\n            <div className=\"Cart-info__total Cart-info__small\">Taxes</div>\n            <div className=\"Cart-info__pricing\">\n              <span className=\"pricing\">$ {trueCheckout == false ? this.props.checkout.totalTax : 0.00}</span>\n            </div>\n          </div>\n          <div className=\"Cart-info clearfix\">\n            <div className=\"Cart-info__total Cart-info__small\">Total</div>\n            <div className=\"Cart-info__pricing\">\n              <span className=\"pricing\">$ { trueCheckout == false ? finalCheckoutValue.toFixed(2) : finalDonation} </span>\n            </div>\n          </div>\n          <CartButton color=\"black\" text=\"Checkout\" onClick={() => {window.open(this.props.checkout.webUrl)}}></CartButton>\n        </footer>\n        </div>\n        </ReactModal>\n      )}\n      </div>\n    )}\n}\n\nexport default Cart;\n"],"mappings":"AASA","sourceRoot":""}