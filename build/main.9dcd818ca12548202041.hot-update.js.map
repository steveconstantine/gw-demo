{"version":3,"file":"main.9dcd818ca12548202041.hot-update.js","sources":["webpack:///./src/server.js"],"sourcesContent":["import React from 'react';\nimport express from 'express';\nimport { renderToString } from 'react-dom/server';\nimport { ApolloProvider, getDataFromTree } from 'react-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { CachePersistor } from 'apollo-cache-persist';\nimport * as fetch from 'isomorphic-fetch';\nimport { AppRegistry } from 'react-native';\nimport { render } from '@jaredpalmer/after';\nimport routes from './routes';\nimport Document from './Document';\n\nif (!process.browser) {\n  global.fetch = fetch\n}\n\nconst cache = new InMemoryCache();\n\nconst ssrMode = !process.browser;\nconst httpLink = createHttpLink({ uri: 'https://giftingwildinc.myshopify.com/api/graphql', fetch: fetch })\n\nconst token = localStorage.get('token');\n\nconst middlewareLink = setContext(() => ({\n  headers: {\n    'X-Shopify-Storefront-Access-Token': 'e533f252f3a673c02f85798859530319'\n  },\n  authorization: token ? `Bearer ${token}` : \"\",\n}))\n\nconst client = new ApolloClient({\n  ssrMode,\n  link: middlewareLink.concat(httpLink),\n  cache: ssrMode\n    ? cache\n    : new cache.restore(window.__APOLLO_STATE__),\n});\n\nvar compression = require('compression');\nvar minify = require('express-minify');\nvar localStorage = require('web-storage')().localStorage;\n\nconst assets = require(process.env.RAZZLE_ASSETS_MANIFEST);\n\nconst server = express();\n\nserver.use(compression({ level: 9 }));\nserver.use(minify());\n\nserver\n  .disable('x-powered-by')\n  .use(express.static(process.env.RAZZLE_PUBLIC_DIR))\n  .get('/*', async (req, res) => {\n    const customRenderer = node => {\n\n      class App extends React.Component {\n\n        constructor(props:props) {\n          super(props);\n          console.log(props);\n          this.state = { client: null, loaded: false };\n        }\n\n        async componentDidMount() {\n          this.setState({\n            client: client,\n            loaded: true,\n          });\n        }\n\n        render() {\n          if (!this.state.loaded) {\n           return <div>Loading-Server</div>;\n         } else {\n           return <ApolloProvider client={this.state.client}>{node}</ApolloProvider>;\n         }\n       }\n     }\n\n      return getDataFromTree(App).then(async data => {\n        AppRegistry.registerComponent('App', () => App);\n        const { element, getStyleElement } = AppRegistry.getApplication('App');\n        const css = getStyleElement();\n        const initialApolloState = client.extract();\n        const html = renderToString(element);\n        return { html, initialApolloState, css };\n      });\n    };\n\n    try {\n      const html = await render({\n        req,\n        res,\n        routes,\n        assets,\n        customRenderer,\n        document: Document,\n        // Anything else you add here will be made available\n        // within getInitialProps(ctx)\n        // e.g a redux store...\n        customThing: 'thing',\n      });\n      res.send(html);\n    } catch (error) {\n      res.json(error);\n      console.log('server instantiation error');\n      console.log(error);\n    }\n  });\n\n  server.use(function(req, res, next) {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n    next();\n  });\n\nexport default server;\n"],"mappings":"AAeA","sourceRoot":""}