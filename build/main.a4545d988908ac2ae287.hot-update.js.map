{"version":3,"file":"main.a4545d988908ac2ae287.hot-update.js","sources":["webpack:///./src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, compose } from 'react-apollo';\nimport Cart from './components/Cart';\nimport gql from 'graphql-tag';\nimport {\n  createCheckout,\n  checkoutLineItemsAdd,\n  checkoutLineItemsUpdate,\n  checkoutLineItemsRemove,\n  checkoutCustomerAssociate,\n  addVariantToCart,\n  addDonationToCart,\n  updateDonationInCart,\n  removeDonationInCart,\n  updateLineItemInCart,\n  removeLineItemInCart,\n  associateCustomerCheckout\n} from './checkout';\nimport Loader from 'react-loader-spinner';\nimport { Tooltip, SegmentedControl, Heading, Column, Box, IconButton, Text, Flyout, Button } from 'gestalt';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport Headroom from 'react-headroom';\nimport Drawer from 'rc-drawer-menu';\n// import GWInfo from './components/Info/GWInfo';\nimport ModalLinkProduct from './components/Product';\nimport Ionicon from 'react-ionicons';\nimport Slider from \"react-slick\";\nimport { withRouter } from \"react-router-dom\";\nimport BackgroundImage from 'react-background-image-loader';\nimport Scrollable from 'sc-hide-scrollbar-react';\nimport StickyFooter from 'react-sticky-footer';\nimport './styles/DonationRadioButtonGroup.css';\nimport './styles/gestalt.css';\nimport './styles/RadioButtonGroup.css';\nimport './styles/rc-drawer-menu.css';\nimport './styles/react-router-modal.css';\nimport './styles/rodal.css';\nimport './styles/slick.css';\nimport './styles/slick-theme.css';\nimport './styles/app.css';\nimport './styles/Scrollable.css';\n\nvar localStorage = require('web-storage')().localStorage;\n\nclass Home extends Component {\n\n   responsive = {\n      0: {\n          items: 2\n      },\n      1024: {\n          items: 4\n      }\n  };\n\n  constructor() {\n    super();\n\n    this.state = {\n      opentool: false,\n      isFull: false,\n      isCartOpen: false,\n      isCustomerAuthOpen: false,\n      activeIndex: 0,\n      isNewCustomer: false,\n      loggedIn: localStorage.get('token') ? true : false,\n      products: [],\n      checkout: { lineItems: { edges: [] } },\n      suggestions: [],\n      value: '',\n      shop: {},\n      delta: 5,\n      navbarHeight: 69,\n      open: false,\n      infoOpen: false,\n      hasMore: true,\n      modalLinks: this.props && this.props.data ? this.generateElements() : [],\n      itemIndex: 0,\n      items: ['Our Story', 'Campaign'],\n      isSliding: false,\n      direction: false,\n      imagesLoaded: false,\n    };\n\n    this.handleCartClose = this.handleCartClose.bind(this);\n    this.handleCartOpen = this.handleCartOpen.bind(this);\n    this.openCustomerAuth = this.openCustomerAuth.bind(this);\n    this.closeCustomerAuth = this.closeCustomerAuth.bind(this);\n    this.closeCustomerAuthVerified = this.closeCustomerAuthVerified.bind(this);\n    this.addVariantToCart = addVariantToCart.bind(this);\n    this.addDonationToCart = addDonationToCart.bind(this);\n    this.updateDonationInCart = updateDonationInCart.bind(this);\n    this.removeDonationInCart = removeDonationInCart.bind(this);\n    this.updateLineItemInCart = updateLineItemInCart.bind(this);\n    this.removeLineItemInCart = removeLineItemInCart.bind(this);\n    this.handleDonations = this.handleDonations.bind(this);\n    this.showAccountVerificationMessage = this.showAccountVerificationMessage.bind(this);\n    this.associateCustomerCheckout = associateCustomerCheckout.bind(this);\n    this.handleClick = this._handleClick.bind(this);\n    this.handleClickTooltip = this._handleClickTooltip.bind(this);\n    this.handleDismiss = this._handleDismiss.bind(this);\n    this.handleDismissTooltip = this._handleDismissTooltip.bind(this);\n    this.handleInfoClick = this._handleInfoClick.bind(this);\n    this.handleInfoDismiss = this._handleInfoDismiss.bind(this);\n    this.handleTabsChange = this._handleTabsChange.bind(this);\n    this.handleItemChange = this.handleItemChange.bind(this);\n    this.preventClickAfter = this.preventClickAfter.bind(this);\n    this.setSwipeDirection = this.setSwipeDirection.bind(this);\n    this.handleImageLoaded = this.handleImageLoaded.bind(this);\n    this.imagesLoaded = this.imagesLoaded.bind(this);\n  }\n\n\n  componentWillMount() {\n    localStorage.remove('checkout');\n    this.props.createCheckout({\n      variables: {\n        input: {}\n      }}).then((res) => {\n      let resSave = localStorage.get('checkout') || res.data.checkoutCreate.checkout;\n      this.setState({\n        checkout: resSave\n      });\n    });\n\n    this.setState({imagesLoaded: true});\n  }\n\n  componentDidMount() {\n  }\n\n  static propTypes = {\n    data: PropTypes.shape({\n      loading: PropTypes.bool,\n      error: PropTypes.object,\n      shop: PropTypes.object,\n    }).isRequired,\n    createCheckout: PropTypes.func.isRequired,\n    checkoutLineItemsAdd: PropTypes.func.isRequired,\n    checkoutLineItemsUpdate: PropTypes.func.isRequired\n  }\n\n  handleItemChange({ activeIndex }) {\n    this.setState(prevState => ({ itemIndex: activeIndex }));\n  };\n\n  handleCartOpen() {\n    this.props.history.push('/cart');\n    this.setState({\n      isCartOpen: true,\n    });\n  }\n\n  handleCartClose() {\n    this.props.history.push('/');\n    this.setState({\n      isCartOpen: false,\n    });\n  }\n\n  openCustomerAuth(event) {\n    if (event.target.getAttribute('data-customer-type') === \"new-customer\") {\n      this.setState({\n        isNewCustomer: true,\n        isCustomerAuthOpen: true\n      });\n    } else {\n      this.setState({\n        isNewCustomer: false,\n        isCustomerAuthOpen: true\n      });\n    }\n  }\n\n  showAccountVerificationMessage(){\n    this.setState({ accountVerificationMessage: true });\n    setTimeout(() => {\n     this.setState({\n       accountVerificationMessage: false\n     })\n   }, 5000);\n  }\n\n  closeCustomerAuth() {\n    this.setState({\n      isCustomerAuthOpen: false,\n    });\n  }\n\n  closeCustomerAuthVerified() {\n    this.setState({\n      isCustomerAuthOpen: false,\n    });\n  }\n\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n   _handleClick() {\n    this.setState(() => ({ open: !this.state.open }));\n  }\n  _handleDismiss() {\n    this.setState(() => ({ open: false }));\n  }\n\n    _handleClickTooltip() {\n    this.setState(() => ({ opentool: true }));\n  }\n\n    _handleDismissTooltip() {\n    this.setState(() => ({ opentool: false }));\n  }\n\n\n   _handleInfoClick() {\n    this.setState(() => ({ infoOpen: !this.state.infoOpen }));\n  }\n  _handleInfoDismiss() {\n    this.setState(() => ({ infoOpen: false }));\n  }\n\n  _handleTabsChange({ activeTabIndex, event }) {\n    event.preventDefault();\n    this.setState({\n      activeIndex: activeTabIndex\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  };\n\n  selectedVariant(selectedVariant) {\n    this.setState({selectedVariant: selectedVariant});\n  }\n\n  preventClickAfter(event) {\n    event.preventDefault();\n  }\n\n  setSwipeDirection(event, slick, direction) {\n    if (direction == 'left') {\n      this.setState({direction: true});\n    } else {\n      this.setState({direction: false});\n    }\n  }\n\n  handleImageLoaded(index) {\n    this.setState({imagesLoaded: true });\n  }\n\n  imagesLoaded() {\n    const imagesLoaded = this.state.imagesLoaded;\n    return true;\n  }\n\n  handleDonations(donationVariantId, value, lineItemId) {\n    console.log(lineItemId);\n    if (lineItemId != null) {\n      console.log(\"handleDonations 1st if\");\n      this.removeDonationInCart(lineItemId);\n      this.updateDonationInCart(donationVariantId, lineItemId, value);\n    } else {\n      console.log(\"handleDonations 2nd if\");\n      this.removeDonationInCart(lineItemId);\n      this.updateDonationInCart(donationVariantId, lineItemId, value);\n    }\n  }\n\n  render() {\n\n    if (this.props.data.loading) {\n      return (<div id={'spinner'} style={{'background': 'url(/skye-whalesong8x32.jpg)'}}></div>);\n    }\n    if (this.props.data.error) {\n      return <p>{this.props.data.error.message}</p>;\n    }\n\n      console.log(\"Home - render method\");\n      console.log(this.state.checkout);\n\n    let productIDs = this.props.data.shop.products.edges.reduce((result, product) => {\n    if (product.node.handle != 'donation') {\n        result.push([product.node.id, product.node.vendor, product.node.title]);\n      }\n      return result;\n    }, []);\n\n    var settings = {\n      dots: true,\n      infinite: true,\n      accessibility: true,\n      speed: 500,\n      autoplay: false,\n      autoplaySpeed: 1800,\n      slidesToShow: 4,\n      slidesToScroll: 4,\n      rtl: this.state.direction,\n      responsive: [{\n       breakpoint: 1024,\n       settings: {\n         slidesToShow: 2,\n         slidesToScroll: 2,\n         infinite: true,\n         dots: true\n          }\n      }],\n      beforeChange: () => this.setState({isSliding: true}),\n      afterChange: () => this.setState({isSliding: false}),\n    };\n\n\n    let donationVariantId = '';\n    const productsLinks = this.props.data.shop.products.edges.reduce((result, product, index) => {\n      if (product.node.handle != 'donation') {\n      result.push(\n        <ModalLinkProduct\n          addVariantToCart={this.addVariantToCart}\n          checkout={this.state.checkout}\n          client={this.props.client}\n          key={product.node.id.toString()}\n          product={product.node}\n          productIDs={productIDs}\n          productIndex={index}\n          search={this.state.search}\n          artSize={(Math.random() + 1)}\n          selectedVariant={this.selectedVariant}\n          isSliding={this.state.isSliding}\n          handleImageLoaded={true}\n          cartOpen={this.state.isCartOpen == true ? true : false }\n        />);\n      } else {\n        donationVariantId =  product.node.variants.edges[0].node.id;\n      }\n      return result;\n    }, []);\n\n    return (\n        <Scrollable>\n          <Headroom id={'header'} className={'header nav-down'}\n            style={{\n            WebkitTransition: 'all .5s ease-in-out',\n            MozTransition: 'all .5s ease-in-out',\n            OTransition: 'all .5s ease-in-out',\n            transition: 'all .5s ease-in-out',\n            position: 'fixed',\n            height: '0',\n            zIndex: '8'\n          }}>\n            {this.state.open &&\n              <Flyout\n                anchor={this.anchor}\n                idealDirection=\"down\"\n                message=\"Hi There!\"\n                onDismiss={this.handleDismiss}\n                size=\"md\"\n              >\n                <Box padding={3}>\n                  <Text bold align=\"center\">\n                    Accounts are coming! Don't worry, by staying logged in we've got your orders on file.\n                  </Text>\n                  <Box paddingX={2} marginTop={3}>\n                    <Button color=\"red\" text=\"Ask us anything\" />\n                  </Box>\n                  <Box paddingX={2} marginTop={3}>\n                    <Button color=\"blue\" text=\"Log out\" onClick={() => {localStorage.removeItem('token'); this.setState({loggedIn: false})}}/>\n                  </Box>\n                </Box>\n              </Flyout>}\n            {this.state.infoOpen &&\n              <Flyout\n                anchor={this.infoAnchor}\n                idealDirection=\"down\"\n                message=\"Hi There!\"\n                onDismiss={this.handleInfoDismiss}\n                size=\"md\"\n              >\n                <Box maxWidth={300} marginTop={2} marginBottom={2}>\n                  <div style={{'paddingTop': '8px'}}></div>\n                  <SegmentedControl\n                    items={this.state.items}\n                    selectedItemIndex={this.state.itemIndex}\n                    onChange={this.handleItemChange}\n                  />\n                    {this.state.itemIndex === 0 ? <Box paddingY={2}>\n                      <Heading size=\"xs\">\n                        We feel like helping clean up ocean pollution. <br/>Our goals include enabling participation and innovation with organised cleanup efforts. It is a gift to be part of something good!\n                      </Heading>\n                </Box> : null }\n                {this.state.itemIndex === 1 ?\n                  <Box paddingY={2}>\n                    <Heading size=\"xs\">\n                    Funds raised go to direct action involved with cleaning the ocean. <br/> Our spotlight is on proven action by   ............................\n                    You are invited to please visit their website - ............. .com\n                    </Heading>\n                  </Box> : null }\n                </Box>\n              </Flyout>}\n              <Drawer level={['body > h1', '#root']}\n                placement={'right'}\n                handleChild={(<div></div>)}\n                handleStyle={{'top': '100px', 'display': 'none !important'}}\n                open={this.state.isCartOpen && this.props.location.pathname == '/cart' ? true : false}\n                onMaskClick={() => this.handleCartClose()}\n                onHandleClick={() => this.handleCartClose()}\n              >\n                <Box padding={3}>\n                  <Cart\n                    setDonationValue={(value, lineItemId) => { this.handleDonations(donationVariantId, value, lineItemId) }}\n                    removeDonationInCart={(lineItemId) => { this.removeDonationInCart(lineItemId)}}\n                    removeLineItemInCart={this.removeLineItemInCart}\n                    updateLineItemInCart={this.updateLineItemInCart}\n                    checkout={this.state.checkout}\n                    isCartOpen={this.state.isCartOpen && this.props.location.pathname == '/cart' ? true : false}\n                    handleCartClose={this.handleCartClose}\n                    customerAccessToken={this.state.customerAccessToken}\n                    donationId={donationVariantId}\n                  />\n                </Box>\n              </Drawer>\n              <Box color=\"transparent\" padding={1} display=\"flex\" direction=\"row\" alignItems=\"center\">\n                <Box paddingX={2}>\n                    <img style={{'maxWidth': '55px'}} src=\"/gw-logo.png\" alt=\"Gifting Wild\" border=\"0\" />\n                </Box>\n                <Box flex=\"grow\" paddingX={5}>\n                  <img style={{'maxWidth': '105px', 'transform' : 'translate(-20px,3px)'}} src=\"/Gift_W_top.png\" alt=\"Gifting Wild\" border=\"0\" />\n                </Box>\n                 <Box paddingX={2}>\n                  <div className=\"questionButton\" ref={d => {\n                      this.infoAnchor = d;\n                  }}>\n                    <IconButton\n                        accessibilityLabel=\"Information About Us\"\n                        icon=\"question-mark\"\n                        size=\"md\"\n                        iconColor=\"white\"\n                        onClick={this.handleInfoClick}\n                      />\n                    </div>\n                  </Box>\n              <Box paddingX={2} paddingY={5}>\n                <div className=\"cartButton\">\n                  <Ionicon icon=\"ios-cart\" fontSize=\"24px\" color={ this.state.isCartOpen ? \"#FFF\" : \"#FFF\" } onClick={() => this.handleCartOpen() }/>\n                </div>\n              </Box>\n            </Box>\n          </Headroom>\n          <div className=\"App\" id=\"App\" style={{'background': 'url(/skye-whalesong8x32.jpg)'}}>\n          <div className=\"Flash__message-wrapper\">\n              <p className={`Flash__message ${this.state.accountVerificationMessage ? 'Flash__message--open' : ''}`}>We have sent you an email, please click the link included to verify your email address</p>\n            </div>\n            <div style={{'display': 'flex', 'alignItems': 'center', 'justifyContent': 'center', 'paddingTop': '65px'}}>\n              <Box maxWidth={'100vw'}display=\"flex\" direction=\"row\" justifyContent=\"around\">\n              <div className=\"blue\">\n              <Slider {...settings}>\n                       {productsLinks}\n                </Slider>\n                </div>\n              </Box>\n            </div>\n          <div className=\"just-donate\" style={{'display': 'flex', 'justifyContent': 'flex-end', 'marginTop': '420px'}}>\n            <Box padding={2}>\n              { this.state.isCartOpen == false ? <Button color=\"transparent\" text=\"Donate Extra\" size=\"lg\" onClick={this.handleCartOpen}/> : null }\n            </Box>\n          </div>\n        </div>\n        <StickyFooter\n    bottomThreshold={50}\n    normalStyles={{\n    backgroundColor: \"#d3d9e054\",\n    padding: \"0.1rem 2rem 0.1em 100vw\",\n    }}\n    stickyStyles={{\n    backgroundColor: \"#d3d9e054\",\n    padding: \"0.1rem 2rem 0.1em 100%\",\n    position: \"fixed\",\n    bottom: \"0\",\n    right: \"0\",\n    }}\n>        <Box>\n        <div className=\"sticky-footer\"\n          ref={c => {\n            this.anchortool = c;\n          }}\n        >\n          {this.state.opentool == false ?\n            <button className=\"copyright-button\" onClick={this.handleClickTooltip}>©</button>\n            :\n            <IconButton\n              accessibilityLabel=\"Close Copyright Information\"\n              icon=\"cancel\"\n              size=\"sm\"\n              iconColor=\"white\"\n              onClick={() => this.setState({opentool: false})}\n            />\n          }\n        </div>\n          {this.state.opentool && (\n            <div>\n            <Tooltip\n              size=\"xl\"\n              anchor={this.anchortool}\n              idealDirection=\"left\"\n              onDismiss={this.handleDismissTooltip}\n            >\n              <Text bold color=\"white\" size=\"md\">\n                Copyright © 2018 - Gifting Wild Inc. Art and Their Prints Are Trademark / Registered / Copyright of Respective Artist(s).\n              </Text>\n            </Tooltip>\n            </div>\n          )}\n        </Box>\n        </StickyFooter>\n      </Scrollable>\n    );\n  }\n}\n\nconst query = gql`\nquery shopQuery {\n  shop {\n    name\n    products(first:15) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          title\n          vendor\n          handle\n          productType\n          descriptionHtml\n          options {\n            id\n            name\n            values\n          }\n          variants(first: 30) {\n            edges {\n              node {\n                id\n                title\n                selectedOptions {\n                  name\n                  value\n                }\n                image {\n                  src\n                }\n                availableForSale\n                price\n              }\n            }\n          }\n          images(first:30) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n            }\n            edges {\n              node {\n                src\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nconst AppWithDataAndMutation = compose(\n  graphql(query),\n  graphql(createCheckout, {name: \"createCheckout\"}),\n  graphql(checkoutLineItemsAdd, {name: \"checkoutLineItemsAdd\"}),\n  graphql(checkoutLineItemsUpdate, {name: \"checkoutLineItemsUpdate\"}),\n  graphql(checkoutLineItemsRemove, {name: \"checkoutLineItemsRemove\"}),\n  graphql(checkoutCustomerAssociate, {name: \"checkoutCustomerAssociate\"})\n)(Home);\n\nexport default withRouter(AppWithDataAndMutation);\n\n/**\n\n{ this.state.loggedIn === true ?\n  <Box paddingX={2}>\n    <div ref={c => {\n      this.anchor = c;\n    }}>\n      <IconButton\n          accessibilityLabel=\"Accounts\"\n          icon=\"people\"\n          size=\"md\"\n          iconColor=\"white\"\n          onClick={this.handleClick}\n      />\n    </div>\n  </Box> :\n  <Box paddingX={2}>\n    <IconButton\n      accessibilityLabel=\"Accounts\"\n      icon=\"people\"\n      size=\"md\"\n      iconColor=\"white\"\n      onClick={() => this.setState({isCustomerAuthOpen: true})}\n    />\n  </Box>\n}\n\n**/\n"],"mappings":"AA2CA","sourceRoot":""}